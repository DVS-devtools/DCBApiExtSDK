// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DCBApiExt
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import CoreTelephony
import Foundation
import Newton
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public struct DCBApiClient {
  public init(baseDomain: Foundation.URL, confInfoDomain: Foundation.URL? = nil, apikey: Swift.String, catalog: Swift.String, country: Swift.String, namespace: Swift.String)
  public mutating func cleanDirtyMFP(_ completion: @escaping (DCBApiExt.DCBResponse<Swift.Bool>) -> Swift.Void)
}
extension Foundation.NSNotification.Name {
  public static let dcbLogging: Foundation.Notification.Name
}
@_hasMissingDesignatedInitializers public class MigrationU20TU30 {
  public static var checkmigration: Swift.Bool {
    get
  }
  @objc deinit
}
extension DCBApiExt.DCBUserManager {
  public class var dcbMenuItems: [DCBApiExt.DCBMenuItem]? {
    get
  }
  public class func refreshMenuItems()
}
extension Swift.String {
  public func addingPercentEncodingForRFC3986() -> Swift.String
  public func getQueryStringValue(for key: Swift.String) -> Swift.String?
  public func forcingStart(with string: Swift.String) -> Swift.String
  public var sha256: Swift.String? {
    get
  }
  public var jsonified: Any? {
    get
  }
}
extension DCBApiExt.DCBUser {
  public var subscriptionURL: Foundation.URL {
    get
  }
}
@objc public class DCBMenuItem : ObjectiveC.NSObject, Foundation.NSCoding {
  final public let label: Swift.String
  final public let contentid: Swift.String
  final public let subsection: Swift.String
  public init(label: Swift.String, contentid: Swift.String, subsection: Swift.String)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
public enum DCBResponse<Result> {
  case success(Result)
  case error(Swift.String)
}
@objc final public class DCBUser_2_0 : ObjectiveC.NSObject, Foundation.NSCoding, DCBApiExt.DCBUser {
  final public let baseURL: Foundation.URL
  final public let dadanetUser: Swift.String
  final public let userInfo: Swift.String
  final public let is_uo30: Swift.Bool
  public init(baseURL: Foundation.URL, dadanetUser: Swift.String, userInfo: Swift.String)
  final public var msisdn: Swift.String? {
    get
  }
  final public var uid: Swift.String? {
    get
  }
  final public var country: Swift.String? {
    get
  }
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc final public func encode(with aCoder: Foundation.NSCoder)
  final public func requestExpirationTime(_ completion: @escaping (DCBApiExt.DCBResponse<Foundation.TimeInterval>) -> Swift.Void)
  final public func getAuthRequest(with url: Foundation.URL) -> Foundation.URLRequest
  final public func autologinUserWithGoToStore(_ completion: @escaping (DCBApiExt.DCBResponse<Foundation.URL>) -> Swift.Void)
  final public func requestStatusPage(_ completion: @escaping (DCBApiExt.DCBResponse<Foundation.URL>) -> Swift.Void)
  final public func requestMenu(_ completion: @escaping (DCBApiExt.DCBResponse<[DCBApiExt.DCBMenuItem]>) -> Swift.Void)
  final public func requestMenuItem(_ item: DCBApiExt.DCBMenuItem, completion: @escaping (DCBApiExt.DCBResponse<Swift.String>) -> Swift.Void)
  @objc deinit
}
@objc final public class DCBUser_3_0 : ObjectiveC.NSObject, Foundation.NSCoding, DCBApiExt.DCBUser {
  final public let baseURL: Foundation.URL
  final public let is_uo30: Swift.Bool
  final public let userInfo: Foundation.URL?
  final public let uid: Swift.String?
  final public var msisdn: Swift.String? {
    get
  }
  final public var country: Swift.String? {
    get
  }
  public init(baseURL: Foundation.URL, _: Foundation.URL? = nil)
  final public func addUserProp(_ completion: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc final public func encode(with aCoder: Foundation.NSCoder)
  final public func getExpirationDate(_ completion: @escaping (Foundation.Date?) -> Swift.Void)
  final public func requestExpirationTime(_ completion: @escaping (DCBApiExt.DCBResponse<Foundation.TimeInterval>) -> Swift.Void)
  final public func retrieveCountryLanguageUrlComponent(_ completion: @escaping (Swift.String) -> Swift.Void)
  final public func requestMenu(_ completion: @escaping (DCBApiExt.DCBResponse<[DCBApiExt.DCBMenuItem]>) -> Swift.Void)
  final public func requestMenuItem(_ item: DCBApiExt.DCBMenuItem, completion: @escaping (DCBApiExt.DCBResponse<Swift.String>) -> Swift.Void)
  final public func autologinUserWithGoToStore(_ completion: @escaping (DCBApiExt.DCBResponse<Foundation.URL>) -> Swift.Void)
  final public func requestStatusPage(_ completion: @escaping (DCBApiExt.DCBResponse<Foundation.URL>) -> Swift.Void)
  @objc deinit
}
public struct FingerprintData {
  public init(pony: Swift.String, returnURL: Foundation.URL, domain: Foundation.URL)
  public init?(_ dictionary: [Swift.String : Swift.String])
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
}
public protocol DCBUser : AnyObject {
  var baseURL: Foundation.URL { get }
  var is_uo30: Swift.Bool { get }
  var msisdn: Swift.String? { get }
  var uid: Swift.String? { get }
  var country: Swift.String? { get }
  var subscriptionURL: Foundation.URL { get }
  func requestExpirationTime(_ completion: @escaping (DCBApiExt.DCBResponse<Foundation.TimeInterval>) -> Swift.Void)
  func requestMenu(_ completion: @escaping (DCBApiExt.DCBResponse<[DCBApiExt.DCBMenuItem]>) -> Swift.Void)
  func requestMenuItem(_ item: DCBApiExt.DCBMenuItem, completion: @escaping (DCBApiExt.DCBResponse<Swift.String>) -> Swift.Void)
  func requestStatusPage(_ completion: @escaping (DCBApiExt.DCBResponse<Foundation.URL>) -> Swift.Void)
  func autologinUserWithGoToStore(_ completion: @escaping (DCBApiExt.DCBResponse<Foundation.URL>) -> Swift.Void)
}
@objc @_Concurrency.MainActor(unsafe) public class DCBMenuItemViewController : UIKit.UIViewController, WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) public init(dcbUser: DCBApiExt.DCBUser, dcbMenuItem: DCBApiExt.DCBMenuItem)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFinish _: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_: WebKit.WKWebView, didCommit _: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_: WebKit.WKWebView, didFail _: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc deinit
}
public struct MFPTestObject {
  public var apiCountry: Swift.String?
  public var catalog: Swift.String?
  public var nameSpace: Swift.String?
  public var apikey: Swift.String?
}
extension DCBApiExt.DCBUserManager {
  public func testMFPParameters(_ completion: @escaping (DCBApiExt.DCBResponse<DCBApiExt.MFPTestObject>) -> Swift.Void)
}
public typealias DCBUserManagerCheckCompletion = (Foundation.Date?, Swift.String?) -> Swift.Void
public class DCBUserManager {
  public static var debugInfo: [Swift.String : Any]? {
    get
  }
  public init(client: DCBApiExt.DCBApiClient, loggingIsEnabled: Swift.Bool = true, migrationU20TO30: Swift.Bool = true)
  public class func logout()
  public class var dcbUser: DCBApiExt.DCBUser? {
    get
  }
  public func checkFlowDCB(isActive: Swift.Bool = true, completion: @escaping DCBApiExt.DCBUserManagerCheckCompletion)
  @objc deinit
}
